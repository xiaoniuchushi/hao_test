1、git config --global user.name "hao" // 定义名字

2、git config -- global user.emial "haowenjie@ancsonic.com" // 定义邮箱

3、git init // 初始化Git仓库

4、添加文件到Git仓库
	首先
		git add <file>
		git add <file>
		……// 可以添加好多个（添加到了缓冲区）
	然后
		git commit -m "xxx" // 从缓冲区转到正规的分支结构下,xxx 代表此次修改的标记名称，有利于以后的查找

5、git status // 看状态，随时掌握工作区的状态（哪儿修改了什么的）

6、git diff // 可以查看修改的具体内容

7、git reset --hard commit_id // 返回到以前的版本，commit_id 是版本号

8、git log // 可以查看提交历史，以便确定回到哪个版本
	git log --pretty=oneline // 省略去了编辑作者与编辑时间

9、git reflog // 查看命令历史，以便确定要回到未来的哪个版本

10、cat <file> // 直接查看文件内容

11、撤销修改 
		场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
		场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
		场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

12、rm <file> // 删除工作区的一个选定文件

13、要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

	关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

	此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
	
14、git push -u origin master // 先要关联一个远程库，然后这句话，就把远程中的东西跟本地库中的东西合并，并存入本地库

15、分支管理
		Git鼓励大量使用分支：

		查看分支：git branch

		创建分支：git branch <name>

		切换分支：git checkout <name>

		创建+切换分支：git checkout -b <name>

		合并某分支到当前分支：git merge <name>

		删除分支：git branch -d <name>
		
16、git clone git@github.com:xiaoniuchushi/hao_test.git //	从远程库克隆到本地库

17、分支合并图显示
		git log --graph
		git log --graph --pretty=oneline --abbrev-commit // 表示的界面更加清晰
		
18、git stash  //将工作区未完成的文件，移到某个地方暂时存储起来，这样工作区可以做其他紧要的事情了
	git stash list //可以查看工作区之前临时存储在某个地方的内容
	git stash apply // 恢复 工作区之前临时存储在某个地方的内容 到 工作区
	git stash drop  // 删除	在stash里面 工作区之前临时存储在某个地方的内容‘
	git stash pop   // 恢复 工作区之前临时存储在某个地方的内容 到 工作区, 并且删除stash内容
	
	注意 ：你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
			git stash apply stash@{0}
			
			
19、开发一个新feature，最好新建一个分支
	如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
	
20、git tag <name> // 用于新建一份标签，默认为 HEAD，
	git tag <name> <commit id> // 对指定commit id号，打标签
	git tag -a <tagname> -m "blablabla..."  //可以指定标签信息；
	git tag -s <tagname> -m "blablabla..."  //可以用PGP签名标签；
	git tag	// 可以查看所有标签

21、git tag -d v0.1 // 删除 v0.1 版本（删除本地）
	git push origin v1.0 // 推送1.0版本到远程仓库
	git push origin --tags //一次性推送全部尚未推送到远程的本地标签
	git push origin:refs/tags/v0.9 // 远程删除标签	
	